"use strict";

exports.__esModule = true;
exports.DataModel = exports.ObjectBase = undefined;

var _creators = require("./creators");

var _object = require("object.entries");

var _object2 = _interopRequireDefault(_object);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ObjectBase = exports.ObjectBase = function ObjectBase() {
  var _this = this;

  _classCallCheck(this, ObjectBase);

  this.deserializeObject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, _this);
  }));

  this.rawData = function () {};

  this.onDeserialize = function () {};
}

/* abstract - will be injected from ObjectManager */


/* abstract - will be injected from ObjectManager */
;

/**
 * Base Class that expects the constructor of the object to be executed to
 * allow populating defaults that may of been added post serialization
 *
 */


var DataModel = exports.DataModel = function () {
  function DataModel() {
    _classCallCheck(this, DataModel);
  }

  DataModel.prototype.withProperties = function withProperties(props) {
    for (var _iterator = (0, _object2.default)(props), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref3;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref3 = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref3 = _i.value;
      }

      var _ref2 = _ref3;
      var k = _ref2[0];
      var v = _ref2[1];

      // $FlowFixMe
      this[k] = v;
    }
  };

  return DataModel;
}();

DataModel.ObjectCreator = new (function (_ObjectCreator) {
  _inherits(DataModelCreator, _ObjectCreator);

  function DataModelCreator() {
    _classCallCheck(this, DataModelCreator);

    return _possibleConstructorReturn(this, _ObjectCreator.apply(this, arguments));
  }

  DataModelCreator.prototype.createObject = function createObject(objCls, data) {
    var obj = new objCls(data);
    for (var _iterator2 = (0, _object2.default)(data), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
      var _ref5;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref5 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref5 = _i2.value;
      }

      var _ref4 = _ref5;
      var _key = _ref4[0];
      var val = _ref4[1];

      if (val !== void 0) {
        // Allow re-using models default if provided
        obj[_key] = val;
      }
    }
    return obj;
  };

  return DataModelCreator;
}(_creators.ObjectCreator))();
//# sourceMappingURL=base-classes.js.map

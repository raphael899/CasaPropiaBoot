{"version":3,"sources":["base-classes.js"],"names":["ObjectBase","deserializeObject","rawData","onDeserialize","DataModel","withProperties","props","k","v","ObjectCreator","createObject","objCls","data","obj","key","val"],"mappings":";;;;;AAEA;;AACA;;;;;;;;;;;;;;IAEaA,U,WAAAA,U;;;;;OAGXC,iB,2DAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;OAGpBC,O,GAAU,YAAM,CAAE,C;;OAElBC,a,GAAgB,YAAM,CAAE,C;;;AANxB;;;AAGA;;;AAMF;;;;;;;IAKaC,S,WAAAA,S;;;;;sBAEXC,c,2BAAeC,K,EAA6B;AAC1C,yBAAqB,sBAAWA,KAAX,CAArB,kHAAwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,UAA5BC,CAA4B;AAAA,UAAzBC,CAAyB;;AACtC;AACA,WAAKD,CAAL,IAAUC,CAAV;AACD;AACF,G;;;;;AAPUJ,S,CASJK,a,GAAgB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA,6BACrBC,YADqB,yBACRC,MADQ,EACUC,IADV,EACmD;AACtE,QAAMC,MAAM,IAAIF,MAAJ,CAAWC,IAAX,CAAZ;AACA,0BAAyB,sBAAWA,IAAX,CAAzB,yHAA2C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,UAA/BE,IAA+B;AAAA,UAA1BC,GAA0B;;AACzC,UAAIA,QAAQ,KAAK,CAAjB,EAAoB;AAAE;AACpBF,YAAIC,IAAJ,IAAWC,GAAX;AACD;AACF;AACD,WAAOF,GAAP;AACD,GAToB;;AAAA;AAAA,6B","file":"base-classes.js","sourcesContent":["/** @flow */\nimport type {DataParameter, IObjectBase} from \"./index\";\nimport {ObjectCreator} from \"./creators\";\nimport objEntries from \"object.entries\";\n\nexport class ObjectBase implements IObjectBase {\n\n  /* abstract - will be injected from ObjectManager */\n  deserializeObject = async () => {};\n\n  /* abstract - will be injected from ObjectManager */\n  rawData = () => {};\n\n  onDeserialize = () => {};\n}\n\n/**\n * Base Class that expects the constructor of the object to be executed to\n * allow populating defaults that may of been added post serialization\n *\n */\nexport class DataModel {\n\n  withProperties(props: {[key: string]: any}) {\n    for (const [k, v] of objEntries(props)) {\n      // $FlowFixMe\n      this[k] = v;\n    }\n  }\n\n  static ObjectCreator = new (class DataModelCreator extends ObjectCreator {\n    createObject(objCls: Function, data: DataParameter): Promise<any> | any {\n      const obj = new objCls(data);\n      for (const [key, val] of objEntries(data)) {\n        if (val !== void 0) { // Allow re-using models default if provided\n          obj[key] = val;\n        }\n      }\n      return obj;\n    }\n  })();\n}\n"]}
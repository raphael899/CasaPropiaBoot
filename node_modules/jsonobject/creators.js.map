{"version":3,"sources":["creators.js"],"names":["ObjectCreator","createObject","objCls","data","obj","Object","create","prototype","key","val","serializeObject","origData","onDeserialize","DefaultObjectCreator","MapObjectCreator","Map","SetObjectCreator","Set","DateObjectCreator","Date","date"],"mappings":";;;;;AAYA;;;;;;;;;;;;AAVA;;;;;;;;;IAYaA,a,WAAAA,a;;;;;0BAEXC,Y,yBAAaC,M,EAAkBC,I,EAAyC;AACtE,QAAMC,MAAMC,OAAOC,MAAP,CAAcJ,OAAOK,SAArB,CAAZ;;AAEA,yBAAyB,sBAAWJ,IAAX,CAAzB,kHAA2C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,UAA/BK,GAA+B;AAAA,UAA1BC,GAA0B;;AACzCL,UAAII,GAAJ,IAAWC,GAAX;AACD;AACD,WAAOL,GAAP;AACD,G;;0BAEDM,e,4BAAgBR,M,EAAkBC,I,EAAqBQ,Q,EAAgC;AACrF,WAAOR,IAAP;AACD,G;;0BAEDS,a,0BAAcR,G,EAAgC;AAC5C,QAAI,OAAOA,IAAIQ,aAAX,KAA6B,UAAjC,EAA6C;AAC3CR,UAAIQ,aAAJ;AACD;AACF,G;;;;;AAGH;;;;;;AAIO,IAAMC,sDAAuB,IAAIb,aAAJ,EAA7B;;AAEP;;;;AAIO,IAAMc,8CAAmB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA,6BAC9Bb,YAD8B,yBACjBC,MADiB,EACCC,IADD,EAC2B;AACvD,WAAO,IAAIY,GAAJ,CAAQ,sBAAWZ,IAAX,CAAR,CAAP;AACD,GAH6B;;AAAA;AAAA,EAAoCH,aAApC,IAAzB;;AAMP;;;;AAIO,IAAMgB,8CAAmB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA,6BAC9Bf,YAD8B,yBACjBC,MADiB,EACCC,IADD,EAC2B;AACvD,WAAO,IAAIc,GAAJ,CAAQd,IAAR,CAAP;AACD,GAH6B;;AAAA;AAAA,EAAoCH,aAApC,IAAzB;;AAMA,IAAMkB,gDAAoB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA,8BAC/BjB,YAD+B,yBAClBC,MADkB,EACAC,IADA,EACqB;AAClD,WAAO,IAAIgB,IAAJ,CAAShB,KAAK,MAAL,CAAT,CAAP;AACD,GAH8B;;AAAA,8BAK/BO,eAL+B,4BAKfR,MALe,EAKGC,IALH,EAKwBQ,QALxB,EAKwD;AACrF,WAAO;AACLS,YAAMjB;AADD,KAAP;AAGD,GAT8B;;AAAA;AAAA,EAAqCH,aAArC,IAA1B","file":"creators.js","sourcesContent":["/** @flow */\n\n/*\n * Copyright (c) (2017)\n *\n *  Written by Aikar <aikar@aikar.co>\n *\n *  @license MIT\n *\n */\n\nimport type {DataParameter} from \"./index\";\nimport objEntries from \"object.entries\";\n\nexport class ObjectCreator {\n\n  createObject(objCls: Function, data: DataParameter): Promise<any> | any {\n    const obj = Object.create(objCls.prototype);\n\n    for (const [key, val] of objEntries(data)) {\n      obj[key] = val;\n    }\n    return obj;\n  }\n\n  serializeObject(objCls: Function, data: DataParameter, origData: any): {[string]: any} {\n    return data;\n  }\n\n  onDeserialize(obj: any): Promise<void> | void {\n    if (typeof obj.onDeserialize === 'function') {\n      obj.onDeserialize();\n    }\n  }\n}\n\n/**\n * Standard create object from prototype and copy properties\n * @type {ObjectCreator}\n */\nexport const DefaultObjectCreator = new ObjectCreator();\n\n/**\n * Used to deserialize Map objects\n * @type {{createObject: {(Function, DataParameter): any, (Function, DataParameter): any}}}\n */\nexport const MapObjectCreator = new (class MapObjectCreator extends ObjectCreator {\n  createObject(objCls: Function, data: DataParameter): any {\n    return new Map(objEntries(data));\n  }\n})();\n\n/**\n * Used to deserialize Set objects\n * @type {{createObject: {(Function, DataParameter): any, (Function, DataParameter): any}}}\n */\nexport const SetObjectCreator = new (class SetObjectCreator extends ObjectCreator {\n  createObject(objCls: Function, data: DataParameter): any {\n    return new Set(data);\n  }\n})();\n\nexport const DateObjectCreator = new (class DateObjectCreator extends ObjectCreator {\n  createObject(objCls: Function, data: DataParameter) {\n    return new Date(data['date']);\n  }\n\n  serializeObject(objCls: Function, data: DataParameter, origData: any): {[string]: any} {\n    return {\n      date: data\n    };\n  }\n})();\n"]}
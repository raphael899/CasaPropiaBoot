"use strict";

exports.__esModule = true;
exports.ObjectManager = exports.ObjectCreator = exports.DataModel = exports.ObjectBase = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

require("regenerator-runtime/runtime");

var _object = require("object.entries");

var _object2 = _interopRequireDefault(_object);

var _clone = require("clone");

var _clone2 = _interopRequireDefault(_clone);

var _objectTojson = require("object-tojson");

var _objectTojson2 = _interopRequireDefault(_objectTojson);

var _baseClasses = require("./base-classes");

var _creators = require("./creators");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright (c) (2017)
 *
 *  Written by Aikar <aikar@aikar.co>
 *
 *  @license MIT
 *
 */


exports.ObjectBase = _baseClasses.ObjectBase;
exports.DataModel = _baseClasses.DataModel;
exports.ObjectCreator = _creators.ObjectCreator;

var ObjectManager = exports.ObjectManager = function () {
  function ObjectManager(config) {
    _classCallCheck(this, ObjectManager);

    this.id2ObjMap = new Map();
    this.obj2IdMap = new Map();
    this.logger = console.error.bind(console, "[JSObjectManager]");
    this.objCreators = new Map();

    this.config = config;
    var mappings = _extends({
      "__MAP": Map,
      "__SET": Set,
      "__DATE": Date
    }, config.mappings || {});
    this.objCreators.set("__MAP", _creators.MapObjectCreator);
    this.objCreators.set("__SET", _creators.SetObjectCreator);
    this.objCreators.set("__DATE", _creators.DateObjectCreator);

    if (config.errorLogger) {
      this.logger = config.errorLogger;
    }

    // $FlowFixMe
    var entries = (0, _object2.default)(mappings);
    for (var _iterator = entries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref2 = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref2 = _i.value;
      }

      var _ref = _ref2;
      var id = _ref[0];
      var obj = _ref[1];

      this.addMapping(id, obj);
    }

    this.typeKey = config.typeKey || ":cls";
    this.errorOnUnknownType = Boolean(config.errorOnUnknownType);
  }

  ObjectManager.prototype.hasMapping = function hasMapping(id) {
    if (typeof id === 'string') {
      return this.id2ObjMap.has(id);
    } else {
      return this.obj2IdMap.has(id);
    }
  };

  ObjectManager.prototype.addMapping = function addMapping(id, obj) {
    this.id2ObjMap.set(id, obj);
    this.obj2IdMap.set(obj, id);
    var creators = this.config.creators || {};
    var creator = creators[id] || this.objCreators.get(id) || _creators.DefaultObjectCreator;
    if (obj.ObjectCreator) {
      if (obj.ObjectCreator.createObject) {
        creator = obj.ObjectCreator;
      } else {
        this.logger("Invalid ObjectCreator defined on " + obj.name + " - must implement createObject");
      }
    }
    this.objCreators.set(id, creator);
  };

  /**
   * Asynchronously create a JSON represented object.
   *
   * Rebuilds JS Object into classes in a non recursive manner.
   * This is to avoid the risk of stack overflow issues as Timings
   * data can be very deep.
   *
   * As each data object is processed, its children are added onto the processing stack,
   * so only the root request does remapping operations.
   *
   * We build asynchronously to avoid browsers warning about long operations.
   *
   * @param data
   * @returns {*}
   */


  ObjectManager.prototype.deserialize = function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(data) {
      var obj, queue, i;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              obj = (0, _clone2.default)(data);
              queue = [];

              if (!Array.isArray(data)) {
                _context.next = 15;
                break;
              }

              i = 0;

            case 4:
              if (!(i < data.length)) {
                _context.next = 13;
                break;
              }

              if (!(_typeof(data[i]) === 'object')) {
                _context.next = 10;
                break;
              }

              _context.next = 8;
              return this.createObject(obj[i], queue);

            case 8:
              obj[i] = _context.sent;

              this.queueObject(data[i], queue, this.deserializeItem);

            case 10:
              i++;
              _context.next = 4;
              break;

            case 13:
              _context.next = 19;
              break;

            case 15:
              _context.next = 17;
              return this.createObject(obj, queue);

            case 17:
              obj = _context.sent;

              this.queueObject(obj, queue, this.deserializeItem);

            case 19:
              _context.next = 21;
              return this.processQueue(queue);

            case 21:
              return _context.abrupt("return", obj);

            case 22:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function deserialize(_x) {
      return _ref3.apply(this, arguments);
    }

    return deserialize;
  }();

  /**
   *
   * @param queue
   * @returns {Promise.<void>}
   */


  ObjectManager.prototype.processQueue = function () {
    var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(queue) {
      var item, promise;
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              item = void 0;

            case 1:
              if (!(item = queue.pop())) {
                _context2.next = 8;
                break;
              }

              promise = item();

              if (!(promise && promise.then)) {
                _context2.next = 6;
                break;
              }

              _context2.next = 6;
              return promise;

            case 6:
              _context2.next = 1;
              break;

            case 8:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    function processQueue(_x2) {
      return _ref4.apply(this, arguments);
    }

    return processQueue;
  }();

  ObjectManager.prototype.serialize = function () {
    var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(data) {
      var json;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              json = (0, _objectTojson2.default)(data);

              this.serializeItem(json, data);
              return _context3.abrupt("return", json);

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3, this);
    }));

    function serialize(_x3) {
      return _ref5.apply(this, arguments);
    }

    return serialize;
  }();

  /**
   * @param {ObjectBase} obj
   * @param creator
   * @returns {ObjectBase}
   */


  ObjectManager.prototype._deserializeObject = function () {
    var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(obj, creator) {
      var _this = this;

      var queue, promise;
      return regeneratorRuntime.wrap(function _callee6$(_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              queue = [];

              this.queueObject(obj, queue, this.deserializeItem);
              queue.push(_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        _context4.next = 2;
                        return Promise.resolve(creator.onDeserialize(obj));

                      case 2:
                        return _context4.abrupt("return", _context4.sent);

                      case 3:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4, _this);
              })));
              promise = this.processQueue(queue);


              Object.defineProperty(obj, 'deserializeObject', {
                enumerable: false,
                configurable: true,
                value: function () {
                  var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
                    return regeneratorRuntime.wrap(function _callee5$(_context5) {
                      while (1) {
                        switch (_context5.prev = _context5.next) {
                          case 0:
                            _context5.next = 2;
                            return promise;

                          case 2:
                            return _context5.abrupt("return", obj);

                          case 3:
                          case "end":
                            return _context5.stop();
                        }
                      }
                    }, _callee5, this);
                  }));

                  function value() {
                    return _ref8.apply(this, arguments);
                  }

                  return value;
                }()
              });
              _context6.next = 7;
              return promise;

            case 7:
              return _context6.abrupt("return", obj);

            case 8:
            case "end":
              return _context6.stop();
          }
        }
      }, _callee6, this);
    }));

    function _deserializeObject(_x4, _x5) {
      return _ref6.apply(this, arguments);
    }

    return _deserializeObject;
  }();

  /**
   * @param data
   * @param queue
   * @returns {ObjectBase}
   */


  ObjectManager.prototype.createObject = function () {
    var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(data, queue) {
      var _this2 = this;

      var id, objCls, creator, obj, deferDeserializing;
      return regeneratorRuntime.wrap(function _callee7$(_context7) {
        while (1) {
          switch (_context7.prev = _context7.next) {
            case 0:
              if (!(data[this.typeKey] == null)) {
                _context7.next = 2;
                break;
              }

              return _context7.abrupt("return", data);

            case 2:
              id = String(data[this.typeKey]);
              objCls = this.id2ObjMap.get(id);
              creator = this.objCreators.get(id);

              if (!(typeof id !== 'undefined' && typeof objCls === 'function')) {
                _context7.next = 18;
                break;
              }

              if (!(!creator || !creator.createObject)) {
                _context7.next = 9;
                break;
              }

              this.logger("Invalid Object Creator for", id, objCls);
              throw new Error("Invalid Object Creator for " + id);

            case 9:
              delete data[this.typeKey];

              _context7.next = 12;
              return Promise.resolve(creator.createObject(objCls, data));

            case 12:
              obj = _context7.sent;
              deferDeserializing = obj._deferDeserializing;


              delete obj['_deferDeserializing'];

              Object.defineProperty(obj, 'rawData', {
                enumerable: false,
                configurable: true,
                value: function value() {
                  return data;
                }
              });

              if (!deferDeserializing) {
                queue.push(function () {
                  return _this2._deserializeObject(obj, creator);
                });
              } else {
                Object.defineProperty(obj, 'deserializeObject', {
                  enumerable: false,
                  configurable: true,
                  value: function value() {
                    return _this2._deserializeObject(obj, creator);
                  }
                });
              }
              return _context7.abrupt("return", obj);

            case 18:
              if (!this.errorOnUnknownType) {
                _context7.next = 21;
                break;
              }

              this.logger("Unknown Class Data:", id, data);
              throw new Error("Unknown class ID:" + id);

            case 21:
              return _context7.abrupt("return", data);

            case 22:
            case "end":
              return _context7.stop();
          }
        }
      }, _callee7, this);
    }));

    function createObject(_x6, _x7) {
      return _ref9.apply(this, arguments);
    }

    return createObject;
  }();

  ObjectManager.prototype.deserializeItem = function () {
    var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(val, idx, queue) {
      return regeneratorRuntime.wrap(function _callee8$(_context8) {
        while (1) {
          switch (_context8.prev = _context8.next) {
            case 0:
              if (!val[idx][this.typeKey]) {
                _context8.next = 6;
                break;
              }

              _context8.next = 3;
              return this.createObject(val[idx], queue);

            case 3:
              val[idx] = _context8.sent;
              _context8.next = 7;
              break;

            case 6:
              if (_typeof(val[idx]) === 'object') {
                this.queueObject(val[idx], queue, this.deserializeItem);
              }

            case 7:
            case "end":
              return _context8.stop();
          }
        }
      }, _callee8, this);
    }));

    function deserializeItem(_x8, _x9, _x10) {
      return _ref10.apply(this, arguments);
    }

    return deserializeItem;
  }();

  ObjectManager.prototype.serializeItem = function serializeItem(data, origVal) {

    if (origVal != null && (typeof origVal === "undefined" ? "undefined" : _typeof(origVal)) === 'object') {
      var id = this.obj2IdMap.get(origVal.constructor);
      if (id) {
        var creator = this.objCreators.get(id) || _creators.DefaultObjectCreator;
        data = creator.serializeObject(origVal.constructor, data, origVal) || data || {};
        data[this.typeKey] = id;
      }
      if (data == null || (typeof data === "undefined" ? "undefined" : _typeof(data)) !== 'object') {
        return data;
      }

      if (Array.isArray(data)) {
        for (var i = 0; i < data.length; i++) {
          data[i] = this.serializeItem(data[i], origVal[i]);
        }
      } else {
        for (var _iterator2 = (0, _object2.default)(data), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
          var _ref12;

          if (_isArray2) {
            if (_i2 >= _iterator2.length) break;
            _ref12 = _iterator2[_i2++];
          } else {
            _i2 = _iterator2.next();
            if (_i2.done) break;
            _ref12 = _i2.value;
          }

          var _ref11 = _ref12;
          var _key = _ref11[0];
          var val = _ref11[1];

          data[_key] = this.serializeItem(val, origVal[_key]);
        }
      }
    }
    return data;
  };

  /**
   * @param {object,object[]} obj
   * @param queue
   * @param func
   */


  ObjectManager.prototype.queueObject = function queueObject(obj, queue, func) {
    if (Array.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        if (_typeof(obj[i]) === 'object') {
          queue.push(func.bind(this, obj, i, queue));
        }
      }
    } else {
      for (var _iterator3 = (0, _object2.default)(obj), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
        var _ref14;

        if (_isArray3) {
          if (_i3 >= _iterator3.length) break;
          _ref14 = _iterator3[_i3++];
        } else {
          _i3 = _iterator3.next();
          if (_i3.done) break;
          _ref14 = _i3.value;
        }

        var _ref13 = _ref14;
        var _key2 = _ref13[0];
        var val = _ref13[1];

        if (val && (typeof val === "undefined" ? "undefined" : _typeof(val)) === 'object') {
          queue.push(func.bind(this, obj, _key2, queue));
        }
      }
    }
  };

  return ObjectManager;
}();

exports.default = ObjectManager;
//# sourceMappingURL=index.js.map

"use strict";

exports.__esModule = true;
exports.DateObjectCreator = exports.SetObjectCreator = exports.MapObjectCreator = exports.DefaultObjectCreator = exports.ObjectCreator = undefined;

var _object = require("object.entries");

var _object2 = _interopRequireDefault(_object);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/*
 * Copyright (c) (2017)
 *
 *  Written by Aikar <aikar@aikar.co>
 *
 *  @license MIT
 *
 */

var ObjectCreator = exports.ObjectCreator = function () {
  function ObjectCreator() {
    _classCallCheck(this, ObjectCreator);
  }

  ObjectCreator.prototype.createObject = function createObject(objCls, data) {
    var obj = Object.create(objCls.prototype);

    for (var _iterator = (0, _object2.default)(data), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
      var _ref2;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref2 = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref2 = _i.value;
      }

      var _ref = _ref2;
      var key = _ref[0];
      var val = _ref[1];

      obj[key] = val;
    }
    return obj;
  };

  ObjectCreator.prototype.serializeObject = function serializeObject(objCls, data, origData) {
    return data;
  };

  ObjectCreator.prototype.onDeserialize = function onDeserialize(obj) {
    if (typeof obj.onDeserialize === 'function') {
      obj.onDeserialize();
    }
  };

  return ObjectCreator;
}();

/**
 * Standard create object from prototype and copy properties
 * @type {ObjectCreator}
 */


var DefaultObjectCreator = exports.DefaultObjectCreator = new ObjectCreator();

/**
 * Used to deserialize Map objects
 * @type {{createObject: {(Function, DataParameter): any, (Function, DataParameter): any}}}
 */
var MapObjectCreator = exports.MapObjectCreator = new (function (_ObjectCreator) {
  _inherits(MapObjectCreator, _ObjectCreator);

  function MapObjectCreator() {
    _classCallCheck(this, MapObjectCreator);

    return _possibleConstructorReturn(this, _ObjectCreator.apply(this, arguments));
  }

  MapObjectCreator.prototype.createObject = function createObject(objCls, data) {
    return new Map((0, _object2.default)(data));
  };

  return MapObjectCreator;
}(ObjectCreator))();

/**
 * Used to deserialize Set objects
 * @type {{createObject: {(Function, DataParameter): any, (Function, DataParameter): any}}}
 */
var SetObjectCreator = exports.SetObjectCreator = new (function (_ObjectCreator2) {
  _inherits(SetObjectCreator, _ObjectCreator2);

  function SetObjectCreator() {
    _classCallCheck(this, SetObjectCreator);

    return _possibleConstructorReturn(this, _ObjectCreator2.apply(this, arguments));
  }

  SetObjectCreator.prototype.createObject = function createObject(objCls, data) {
    return new Set(data);
  };

  return SetObjectCreator;
}(ObjectCreator))();

var DateObjectCreator = exports.DateObjectCreator = new (function (_ObjectCreator3) {
  _inherits(DateObjectCreator, _ObjectCreator3);

  function DateObjectCreator() {
    _classCallCheck(this, DateObjectCreator);

    return _possibleConstructorReturn(this, _ObjectCreator3.apply(this, arguments));
  }

  DateObjectCreator.prototype.createObject = function createObject(objCls, data) {
    return new Date(data['date']);
  };

  DateObjectCreator.prototype.serializeObject = function serializeObject(objCls, data, origData) {
    return {
      date: data
    };
  };

  return DateObjectCreator;
}(ObjectCreator))();
//# sourceMappingURL=creators.js.map
